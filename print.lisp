(in-package :cl-meld)

(defun print-val (val &optional (hide-pars nil))
   (cond
      ((var-p val)
         (format t "var(~A)" (var-name val)))
      ((int-p val)
         (format t "~A" (int-val val)))
      ((op-p val)
         (unless hide-pars
            (format t "("))
         (print-val (op-op1 val))
         (format t (op-to-string (op-op val)))
         (print-val (op-op2 val))
         (unless hide-pars
            (format t ")")))))
   
(defun print-args (args)
   (format t "(")
   (dolist-count (arg args id)
      (if (> id 1)
         (format t ","))
      (print-val arg t))
   (format t ")"))
   
(defun print-subgoals (subgoals)
   (do-subgoals subgoals (:name name :args args :id id)
      (if (> id 1)
         (format t ", "))
      (format t "~A" name)
      (print-args args)))
      
(defun print-constraints (subgoals)
   (do-constraints subgoals (:expr expr :id id)
      (if (> id 1)
         (format t ", "))
      (print-val expr t)))
      
(defun print-assignments (subgoals)
   (do-assignments subgoals (var expr id)
      (if (> id 1)
         (format t ", "))
      (print-val var t)
      (format t " = ")
      (print-val expr t)))
      
(defun print-program (code)
   (format t "I found the following definitions:~%")
   (do-definitions code (name typs)
      (format t "~A ~A~%" name typs))
   (format t "I found the following clauses:~%")
   (do-clauses code (:head head :body body :id id)
      (format t "Clause ~A: " id)
      (print-subgoals head)
      (format t " :- ")
      (print-subgoals body)
      (when (has-assignments body)
         (format t ", ")
         (print-assignments body))
      (when (has-constraints body)
         (format t ", ")
         (print-constraints body))
      (format t "~%")))