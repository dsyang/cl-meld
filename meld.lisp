(in-package :cl-meld)
       
;; debug variables
(defvar *prog* nil)
(defvar *ast* nil)
(defvar *code* nil)

(defun localize-code (file)
   (printdbg "Parsing file ~a" file)
   (let ((ast (add-base-tuples (parse-meld-file file))))
      (printdbg "Parsing done. Optimizing topology...")
      (let ((ast (optimize-topology ast)))
         (printdbg "Topology optimized. Type-checking...")
         (let ((ast (type-check ast)))
            (printdbg "Type checked. Localizing rules...")
            (let ((ast (localize ast)))
               (printdbg "Localization done.")
               (setf *ast* ast))))))
                     
(defun do-meld-compile (file out)
   (let ((ast (localize-code file)))
      (printdbg "Compiling AST into VM instructions...")
      (let ((compiled (compile-ast ast)))
         (printdbg "All compiled. Now optimizing result...")
         (let ((compiled (optimize-code ast compiled)))
            (printdbg "Optimized. Now writing results to ~a" out)
            (setf *code* compiled)
            (output-code ast compiled out)
            (printdbg "All done.")
            t))))
         
(defun meld-compile (file out)
   (handler-case (do-meld-compile file out)
      (yacc-parse-error (c) (format t "Parse error: ~a~%" c))
      (expr-invalid-error (c) (format t "Expression error: ~a~%" (text c)))
      (type-invalid-error (c) (format t "Type error: ~a~%" (text c)))
      (localize-invalid-error (c) (format t "Localization error: ~a~%" (text c)))
      (compile-invalid-error (c) (format t "Compile error: ~a~%" (text c)))
      (output-invalid-error (c) (format t "Output error: ~a~%" (text c)))))

;; this is to be removed... soon
(defun comp (prog &optional (out "base"))
   (meld-compile (concatenate 'string "/Users/flaviocruz/Projects/meld/progs/" prog ".meld")
                 (concatenate 'string "/Users/flaviocruz/Projects/meld/" out)))
                 
; (defparameter *force* (comp "pagerank"))